type Category {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  coverImage: String
  slug: String!
  restaurants: [Restaurant!]!
  restaurantCount: Int!
}

# A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
scalar DateTime

type DishChoice {
  name: String!
  extra: Int
}

type DishOption {
  name: String!
  choices: [DishChoice!]
  extra: Int
}

type Dish {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  price: Int!
  photo: String
  description: String!
  restaurant: Restaurant!
  options: [DishOption!]
}

type OrderItemOption {
  name: String!
  choice: String
}

type OrderItem {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  dish: Dish!
  options: [OrderItemOption!]
}

type Order {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  customer: User
  driver: User
  restaurant: Restaurant
  items: [OrderItem!]!
  total: Float!
  status: OrderStatus!
}

enum OrderStatus {
  Pending
  Cooking
  Cooked
  PickedUp
  Delivered
}

type Restaurant {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  coverImage: String!
  address: String
  category: Category
  owner: User!
  orders: [Order!]!
  menu: [Dish!]
  isPromoted: Boolean!
  promotedUntil: DateTime
}

type Payment {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  transactionId: String!
  user: User!
  restaurant: Restaurant!
  restaurantId: Int!
}

type User {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  password: String!
  role: UserRole!
  verified: Boolean!
  restaurants: [Restaurant!]!
  orders: [Order!]!
  payments: [Payment!]!
  riders: [Order!]!
}

enum UserRole {
  Client
  Owner
  Delivery
}

type CreateAccountOutput {
  error: String
  ok: Boolean!
}

type EditProfileOutput {
  error: String
  ok: Boolean!
}

type LoginOutput {
  error: String
  ok: Boolean!
  token: String
}

type UserProfileOutput {
  error: String
  ok: Boolean!
  user: User
}

type VerifyEmailOutput {
  error: String
  ok: Boolean!
}

type CreateRestaurnatOutput {
  error: String
  ok: Boolean!
}

type EditRestaurantOutput {
  error: String
  ok: Boolean!
}

type DeleteRestaurantOutput {
  error: String
  ok: Boolean!
}

type AllCategoriesOutput {
  error: String
  ok: Boolean!
  categories: [Category!]
}

type CategoryOutput {
  error: String
  ok: Boolean!
  totalPages: Int
  totalResults: Int
  category: Category
}

type RestaurantsOutput {
  error: String
  ok: Boolean!
  totalPages: Int
  totalResults: Int
  restaurants: [Restaurant!]
}

type RestaurantOutput {
  error: String
  ok: Boolean!
  restaurant: Restaurant
}

type SearchRestaurantOutput {
  error: String
  ok: Boolean!
  totalPages: Int
  totalResults: Int
  restaurants: [Restaurant!]
}

type CreateDishOutput {
  error: String
  ok: Boolean!
}

type EditDishOutput {
  error: String
  ok: Boolean!
}

type DeleteDishOutput {
  error: String
  ok: Boolean!
}

type CreateOrderOutput {
  error: String
  ok: Boolean!
}

type GetOrdersOutput {
  error: String
  ok: Boolean!
  orders: [Order!]
}

type GetOrderOutput {
  error: String
  ok: Boolean!
  order: Order
}

type EditOrderOutput {
  error: String
  ok: Boolean!
}

type TakeOrderOutput {
  error: String
  ok: Boolean!
}

type CreatePaymentOutput {
  error: String
  ok: Boolean!
}

type GetPaymentOutput {
  error: String
  ok: Boolean!
  payments: [Payment!]
}

type Query {
  allRestaurants(input: RestaurantsInput!): RestaurantsOutput!
  restaurant(input: RestaurantInput!): RestaurantOutput!
  searchRestaurant(input: SearchRestaurantInput!): SearchRestaurantOutput!
  allCategories: AllCategoriesOutput!
  category(input: CategoryInput!): CategoryOutput!
  me: User!
  userProfile(userId: Float!): UserProfileOutput!
  getOrders(input: GetOrdersInput!): GetOrdersOutput!
  getOrder(input: GetOrderInput!): GetOrderOutput!
  getPayments: GetPaymentOutput!
}

input RestaurantsInput {
  page: Int = 1
}

input RestaurantInput {
  restaurantId: Float!
}

input SearchRestaurantInput {
  page: Int = 1
  query: String!
}

input CategoryInput {
  page: Int = 1
  slug: String!
}

input GetOrdersInput {
  status: OrderStatus
}

input GetOrderInput {
  id: Float!
}

type Mutation {
  createRestaurant(input: CreateRestaurantInput!): CreateRestaurnatOutput!
  editRestaurant(input: EditRestaurantInput!): EditRestaurantOutput!
  deleteRestaurant(input: DeleteRestaurantInput!): DeleteRestaurantOutput!
  createDish(input: CreateDishInput!): CreateDishOutput!
  editDish(input: EditDishInput!): EditDishOutput!
  deleteDish(input: DeleteDishInput!): DeleteDishOutput!
  createAccount(input: CreateAccountInput!): CreateAccountOutput!
  login(input: LoginInput!): LoginOutput!
  editProfile(input: EditProfileInput!): EditProfileOutput!
  verifyEmail(input: VerifyEmailInput!): VerifyEmailOutput!
  createOrder(input: CreateOrderInput!): CreateOrderOutput!
  editOrder(input: EditOrderInput!): EditOrderOutput!
  takeOrder(input: TakeOrderInput!): TakeOrderOutput!
  createPayment(input: CreatePaymentInput!): CreatePaymentOutput!
}

input CreateRestaurantInput {
  name: String!
  coverImage: String!
  address: String
  categoryName: String!
}

input EditRestaurantInput {
  name: String
  coverImage: String
  address: String
  categoryName: String
  restaurantId: Float!
}

input DeleteRestaurantInput {
  restaurantId: Float!
}

input CreateDishInput {
  name: String!
  price: Int!
  description: String!
  options: [DishOptionsInputType!]
  restaurantId: Int!
}

input DishOptionsInputType {
  name: String!
  choices: [DishChoiceInputType!]
  extra: Int
}

input DishChoiceInputType {
  name: String!
  extra: Int
}

input EditDishInput {
  name: String
  price: Int
  description: String
  options: [DishOptionsInputType!]
  dishId: Int!
}

input DeleteDishInput {
  dishId: Float!
}

input CreateAccountInput {
  email: String!
  password: String!
  role: UserRole!
}

input LoginInput {
  email: String!
  password: String!
}

input EditProfileInput {
  email: String
  password: String
}

input VerifyEmailInput {
  code: String!
}

input CreateOrderInput {
  restaurantId: Int!
  items: [CreateOrderItemInput!]!
}

input CreateOrderItemInput {
  dishId: Int!
  options: [OrderItemInputType!]
}

input OrderItemInputType {
  name: String!
  choice: String
}

input EditOrderInput {
  id: Float!
  status: OrderStatus!
}

input TakeOrderInput {
  id: Float!
}

input CreatePaymentInput {
  transactionId: String!
  restaurantId: Int!
}

type Subscription {
  pendingOrder: Order!
  cookedOrders: Order!
  orderUpdates(input: OrderUpdatesInput!): Order!
}

input OrderUpdatesInput {
  id: Float!
}
